第五章 引用类型
引用类型的值是引用类型的一个实例，不具备传统的面面相对象语言所支持的类和接口等基本结构。对象是一个特定引用类型的实例，新对象是使用new操作符后跟一个构造函数来创建的。构造函数本身就是一个函数。
5.1 Object类型
创建Object实例有两种方式
	1、使用new操作后跟Object构造函数
	2、字面量表示法。对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象过程。
	var persion = {
		name:"Nicholas",
		age:29
	};
	个人理解这不就是是个json对象吗？
	访问对象属性使用.表示法，也可使用方括号表示法访问对象的属性。
	方括号表示法主要优点是可以通过变量访问对象属性
	var propertyName = 'name';
	alert(persion[propertyName]);
	除非必须使用变量来访问属性，否则建议使用点表示法。
5.2 Array类型
	ECMAScript数组与其他语言不同的地方在与每一项可以保存任何类型的数据。大小可以动态调整。
	创建有两种方法
	1、使用Array构造函数，可以但不是必须传入数量，也可以传入包含的项,可以省略new操作符
		var colors = new Array();
		var colors = new Array(10);
		var colors = new Array('red','blue','green');
		var colors = Array()
		var colors = ['red','blue','green');
		var colors = [];
	使用方括号并提供相应值的基于0的数字索引。
	length属性不是只读的，可以对length属性赋值而改变数组。
		var colors = ['red','blue','green']
		colors.length = 2
		console.log(colors[2])//undefined
5.2.1 检测数组
	instanceof操作符
	if(value instanceof Array)
	{
	
	};
	ECMAScript5新增了Array.isArray()方法
	if(Array.isArray(value)){
	
	};
5.2.2 转换方法
	所有对象都具有toLocaleString(),toString()和valueof()方法
	var colors = ['red','blue','green'];
	console.log(colors.toString());//String red,blue,green
	console.log(colors.valueOf());//Array ['red','blue','green']
	console.log(colors);//Array ['red','blue','green']
5.2.3 栈方法 后进先出LIFO
	push() pop()
	push()可以传入任意数量参数
5.2.4 对列方法 先进先出FIFO
	shift() 移除数组中的第一项并返回。
	unshift()在数组前端加入任意个项。
5.2.5 重排序方法
	reverse()反转数组项的数据
	sort()默认升序，比较的是字符串
	
	function compare(value1,value2){
		if(value1 <value2){
			return -1;
		}else if(value1 > value2){
			return 1;
		}else{
			return 0;
		}
	}
	var values = [0,1,5,10,15];
	values.sort(compare);
	console.log(values);//0,1,5,10,15
5.2.6 操作方法
	concat()基于当前数组中的所有项创建一个新数组
	slice()截取一个数组，返回一个新数组
5.2.7位置方法
	indexOf()
	lastIndexOf()
5.2.8 迭代方法
	every()
	filter()
	forEach()
	map()
	some()
	var nums = [1,2,3,4,5,4,3,2,1]
	var everyResult = nums.every(function(item,index,array){
		return item>2;
	});
5.2.9 缩小方法
	reduce()
	reduceRight()
5.3 Date类型
	1970年1月1日0:0:0
	new Date() 自动获取当前日期和时间
	Date.parse()接受一个表示日期的字符串参数，返回相应日期的毫秒数
	Date.UTC()
	Date.now()
5.3.1 继承的方法
	toLocaleString()会按照与浏览器设置的地区相适应的格式返回日期和时间。
	new Date().toLocaleString() //"2020/3/27"谷歌浏览器显示
	//"2020/3/27 下午8:44:09"火狐浏览器显示
	toString()通常返回带有时区信息的日期和时间
	new Date().toString()//"Fri Mar 27 2020 20:41:58 GMT+0800 (中国标准时间)"谷歌浏览器显示
	//"Fri Mar 27 2020 20:45:03 GMT+0800 (中国标准时间)"火狐浏览器显示
	
	由于在不同的浏览器中显示不同，所以仅在调试代码时比较有用，在显示日期和时间时没有什么价值。
	valueOf()不返回字符串，返回日期的毫秒数，方便比较日期值。
5.3.2 日期格式化方法
	Date类型还有一些专门用于将日期格式化为字符串的方法
	toDateString() 以特定于实现的格式显示星期几、月、日和年
	toTimeString() 以特定于实现的格式显示时、分、秒和时区
	toLocaleDateString() 已特定于时区的格式显示星期几、月、日和年
	toLocalTimeString()以特定于实现的格式显示时、分、秒
	toUTCString() 以特定于实现的格式完整的UTC日期
5.3.3 日期、时间组件方法
	getTime()
	setTime()
	getFullYear()
	getUTCFullYear()
	...34个函数 121页
5.4 RegExp类型
	ECMAScript通过RegExp类型来支持正则表达式。
	var expression = /pattern/flags;
	pattern 模式部分可以是任何简单或复杂的正则表达式。
	g 表示全局模式（global）
	i 表示不区分大小写（case-insensitive）模式
	m 表示多行（multiline）模式
	var pattern1 = /at/g;//匹配字符串中所有‘at’的实例
	var pattern2 = /[bc]at/i;//匹配第一个bat或者cat，不区分大小写
	var pattern3 = /.at/gi;//匹配所有以at结尾的3个字符的组合，不区分大小写
	([{\^$|)?*+.]}
	
5.4.1 RegExp实例属性
	global：布尔值，表示是否设置了g标志
	ignoreCase：布尔值，表示是否设置了i标志
	lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从0算起。
	multiline：布尔值表示是否设置了m标志
	source：正则表达式的字符串表示
5.4.2 RegExp实例方法
	exec()
	test()
5.4.3 RegExp构造函数属性
5.4.4 模式的局限性
	
5.5 Function类型
	ECMAScript中，函数实际上是对象，每一个函数都是Function类型的实例，而且都与其他引用类型一样具有属性和方法。函数名是指针。
	function sum (num1,num2){
		return num1 + num2;
	}
	
	var sum = function(num1,num2){
		return num1 + num2;
	};
	
	var sum = new Function('num1','num2','return num1 + num2')//不推荐
	
	使用不带圆括号的函数名是访问函数指针
	var anotherSum = sum;
5.5.1 深入理解没有重载
	指针可以重载吗？不可以，只会覆盖，不会重载
5.5.2函数声明与函数表达式
	解析器先读取函数声明，在执行函数表达式时才读取函数表达式。
	此处有函数声明提升（function declaration hoisting）过程
5.5.3 作为值的函数
	
	
	
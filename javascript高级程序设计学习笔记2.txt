JavaScript高级程序设计学习笔记（二）
3.5.4 乘性操作符
	乘法、除法、求模
	在操作非数值的情况下会执行自动类型转换。
	对于不是数值进行乘法，后台会使用Number（）转型函数将其转为数值。
3.5.5 加性操作符
	加法和减法
	如果两个值都是字符串，将两个字符串连接起来。
	如果一个是字符串，则将另一个操作数转换为字符串拼接起来。
	如果是对象，则调用toString（）方法转换为字符串后拼接起来
	减法是将字符串自动转换为数字进行计算。
3.5.6 关系操作符
	<><=>=
3.5.7 相等操作符
	相等和不相等（== ！=）先转换操作数，再比较
	全等和不全等（=== ！==）不转换操作数
3.5.8 条件操作符
	三元操作
3.5.9 赋值操作符
	=
	在等于号前加乘性操作符、加性操作符和位操作符，完成复合赋值操作
	num+=10 不会带来性能的提升
3.5.10 逗号操作符
	一条语句执行多个操作

3.6 语句
3.6.1 if语句
	推荐使用代码块
3.6.2 do-while语句
	后测试循环语句
3.6.3 while语句
3.6.4 for语句
3.6.5 for-in语句
	精准的迭代语句，用来枚举对象的属性，ECMAScript对象的属性没有顺序。因此，通过for-in循环输出的属性名的顺序是不可预测的。
3.6.6 label语句
	使用label语句可以在代码中添加标签，以便将来使用。
	label：statement
	
	start:for(var i = 0;i <count ;i++)
	{
		alert(i)
	}
	这个例子中定义的start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用。
3.6.7 break和continue语句
3.6.8 with语句
		with语句的作用是将代码的作用域设置到一个特定的对象中。
		with（expression）statement；
		定义with语句的目的主要是为了简化多次编写同一个对象的工作
		var qs = location.search.substring(1);
		var hostname = localhost.hostname;
		var url = localhost.href;
		上面几行代码都包含location对象。如果使用with语句，可以改写为
		with(location){
			var qs = search.substring(1);
			var host = hostname;
			var url = href;
		}
		注：严格模式下不允许使用with语句，否则将视为语法错误！
3.6.9 switch语句

3.7 函数
	return之后的任何代码都不会执行
3.7.1 理解参数 ECMAScript函数不介意传递进来多少个参数，不在乎参数类型。即便定义函数只接收两个参数，在调用这个函数时也未必一定要传两个参数。参数在内部是以数组的形式表示的，函数内可通过arguments对象访问参数数组。
命名的参数只提供便利，但不是必须的。
arguments.length
3.7.2 没有重载
	ECMAScript函数不能像传统意义上那样实现重载。
	重复定义会覆盖之前的定义
3.8 小结
	

	